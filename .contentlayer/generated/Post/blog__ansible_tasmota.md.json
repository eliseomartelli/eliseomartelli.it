{
  "title": "Using Ansible to deploy IoT devices",
  "excerpt": "Blending two automation platforms to bring some sanity to the IoT world.",
  "date": "2020-03-10T00:00:00.000Z",
  "tags": [
    "Automation",
    "Ansible",
    "IoT"
  ],
  "body": {
    "raw": "\nThis article is going to show you how an existing tool intended for completely different purposes can be used to automate the boring task of manually setting up and **mantain a fleet of IoT devices.**  \nFor those of you who don't know what [**Ansible**](https://www.ansible.com/) is, Ansible is an automation platform made for enterprises and for those in need of managing a big set of devices, usually servers.\n\n## Getting our feet wet with Ansible\n\nAnsible revolves around the concept of [_Infrastructure as Code_](https://en.wikipedia.org/wiki/Infrastructure_as_code) and provides a set of tools to manage said infrastructure.  \nOne advantage of pursuing to keep our configurations within Ansible is the ability to reproduce builds (configurations, in our case).\n\n## Ansible's basic concepts\n\nFor the sake of simplicity, we're going to focus on **4 core concepts:**\n\n1. Playbooks\n2. Tasks\n3. Modules\n4. Inventory\n\n### Playbooks\n\nAn Ansible Playbook is a YAML file that **describes** the state of the devices involved in the configuration and what tasks should be done.\n\n### Tasks\n\nTasks in Ansible are the **actions** that will be executed.  \nThey run sequentially.\n\n### Modules\n\nModules are used in tasks and they express the **\"type\" of action** that should be executed.\n\n### Inventory\n\nAn inventory is a file that contains the hosts and the **groups** that should be targeted by our tasks.\n\nAfter this little introduction, let's get to it!\n\n## Prerequisites\n\nTo follow this tutorial you need at least one device with [**Tasmota**](https://tasmota.github.io/) already connected to our WiFi network (preferably with a fixed IP address).  \nYou also need a computer with **Python** and **git** installed.\n\n## Installing Ansible\n\nInstalling Ansible is quite easy, many Linux distributions have it inside their repositories, you can also use **pip**, and type this tiny command:\n\n```bash\npip install ansible\n```\n\n## Creating an inventory\n\nTo create an inventory you should create an _inventory_ file and then edit it with your preferred file editor.\n\nAn example file will look something like that:\n\n```\n[plugs]\n192.168.0.10\n\n[lights]\n192.168.0.11\n```\n\nAs you can see we use square brackets to define host groups.\n\n### Using the inventory to store variables\n\nAnother great feature of the inventory is the ability to **store variables** that can be used inside tasks.\n\n```\n[plugs]\n192.168.0.10    friendly_name=\"Bathroom Fan\"\n\n[lights]\n192.168.0.11    friendly_name=\"Kitchen Downlight\"\n```\n\n## Setup the Tasmota integration\n\nSince Tasmota is not the typical use of Ansible we need to install a custom role to use the two systems together.\n\nThe role we're going to use today is Tobias Richter's [\"Tasmota\"](https://galaxy.ansible.com/tobias_richter/tasmota).\n\nThe command to install this role is:\n\n```bash\nansible-galaxy install tobias_richter.tasmota\n```\n\n## Writing the playbook\n\nNow it's time to write the playbook!  \nCreate a new file named _playbook.yaml_ and then open it with your file editor.  \nNow we have to create our first _play._\n\nWe start by defining the group of hosts we want to target and then we have to disable the _gather_facts_ function, as for the [documentation](https://github.com/tobias-richter/ansible-tasmota#fact-gathering) of the custom role.\n\n```yaml\n- hosts: all\n  gather_facts: no\n```\n\nWe can now create our first task and give it a name:\n\n```yaml\ntasks:\n  - name: Ensure device reports status\n```\n\nNext, we have to define what module we're going to use. For this custom role, we have to use the _include_role_ module.  \nOur task will become something like that:\n\n```yaml\ntasks:\n  - name: Ensure device reports status\n    include_role:\n      name: ansible-tasmota\n```\n\nNow it's time to **define** the command we're going to send to our devices.  \nEdit your task as follows:\n\n```yaml\ntasks:\n  - name: Ensure device is present\n    include_role:\n      name: ansible-tasmota\n    vars:\n      tasmota_commands:\n        - command: Status\n```\n\nThe resulting _playbook.yaml_ will look like this:\n\n```yaml\n- hosts: all\n  gather_facts: no\n  tasks:\n    - name: Ensure device is present\n      include_role:\n        name: ansible-tasmota\n      vars:\n        tasmota_commands:\n          - command: Status\n```\n\nNow we can run our playbook like this:\n\n```bash\nansible-playbook -i inventory playbook.yaml\n```\n\nYou can use this as a base to create more complex playbooks.\n\n## Another example\n\nLet's say we want to configure the MQTT connection of our devices, we can use a playbook that looks something like this:\n\n```yaml\n- hosts: all\n  gather_facts: no\n  vars_files:\n    - default.yaml\n  tasks:\n    - name: Ensure template is set\n      include_role:\n        name: ansible-tasmota\n      vars:\n        - name: Ensure mqtt configuration is present\n          include_role:\n            name: ansible-tasmota\n          vars:\n            tasmota_commands:\n              - command: Backlog\n                value: \"mqttuser <mqttuser>; mqttpassword <mqttpass>; mqttport 1883; mqtthost <mqtthost>;\"\n```\n\nAs you can see, using Ansible to **configure** a fleet of Tasmota devices is an **easy** task to setup and will help you manage your growing collection of smart devices in the long run.\n",
    "code": "var Component=(()=>{var d=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var b=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var i in e)o(t,i,{get:e[i],enumerable:!0})},r=(t,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of m(e))!p.call(t,a)&&a!==i&&o(t,a,{get:()=>e[a],enumerable:!(s=u(e,a))||s.enumerable});return t};var y=(t,e,i)=>(i=t!=null?d(g(t)):{},r(e||!t||!t.__esModule?o(i,\"default\",{value:t,enumerable:!0}):i,t)),w=t=>r(o({},\"__esModule\",{value:!0}),t);var h=b((T,l)=>{l.exports=_jsx_runtime});var A={};f(A,{default:()=>_,frontmatter:()=>k});var n=y(h()),k={title:\"Using Ansible to deploy IoT devices\",date:\"2020-03-10\",excerpt:\"Blending two automation platforms to bring some sanity to the IoT world.\",tags:[\"Automation\",\"Ansible\",\"IoT\"]};function c(t){let e=Object.assign({p:\"p\",strong:\"strong\",br:\"br\",a:\"a\",h2:\"h2\",em:\"em\",ol:\"ol\",li:\"li\",h3:\"h3\",pre:\"pre\",code:\"code\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"This article is going to show you how an existing tool intended for completely different purposes can be used to automate the boring task of manually setting up and \",(0,n.jsx)(e.strong,{children:\"mantain a fleet of IoT devices.\"}),(0,n.jsx)(e.br,{}),`\n`,\"For those of you who don't know what \",(0,n.jsx)(e.a,{href:\"https://www.ansible.com/\",children:(0,n.jsx)(e.strong,{children:\"Ansible\"})}),\" is, Ansible is an automation platform made for enterprises and for those in need of managing a big set of devices, usually servers.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Getting our feet wet with Ansible\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Ansible revolves around the concept of \",(0,n.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Infrastructure_as_code\",children:(0,n.jsx)(e.em,{children:\"Infrastructure as Code\"})}),\" and provides a set of tools to manage said infrastructure.\",(0,n.jsx)(e.br,{}),`\n`,\"One advantage of pursuing to keep our configurations within Ansible is the ability to reproduce builds (configurations, in our case).\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Ansible's basic concepts\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"For the sake of simplicity, we're going to focus on \",(0,n.jsx)(e.strong,{children:\"4 core concepts:\"})]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Playbooks\"}),`\n`,(0,n.jsx)(e.li,{children:\"Tasks\"}),`\n`,(0,n.jsx)(e.li,{children:\"Modules\"}),`\n`,(0,n.jsx)(e.li,{children:\"Inventory\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{children:\"Playbooks\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"An Ansible Playbook is a YAML file that \",(0,n.jsx)(e.strong,{children:\"describes\"}),\" the state of the devices involved in the configuration and what tasks should be done.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Tasks\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Tasks in Ansible are the \",(0,n.jsx)(e.strong,{children:\"actions\"}),\" that will be executed.\",(0,n.jsx)(e.br,{}),`\n`,\"They run sequentially.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Modules\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Modules are used in tasks and they express the \",(0,n.jsx)(e.strong,{children:'\"type\" of action'}),\" that should be executed.\"]}),`\n`,(0,n.jsx)(e.h3,{children:\"Inventory\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"An inventory is a file that contains the hosts and the \",(0,n.jsx)(e.strong,{children:\"groups\"}),\" that should be targeted by our tasks.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"After this little introduction, let's get to it!\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Prerequisites\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To follow this tutorial you need at least one device with \",(0,n.jsx)(e.a,{href:\"https://tasmota.github.io/\",children:(0,n.jsx)(e.strong,{children:\"Tasmota\"})}),\" already connected to our WiFi network (preferably with a fixed IP address).\",(0,n.jsx)(e.br,{}),`\n`,\"You also need a computer with \",(0,n.jsx)(e.strong,{children:\"Python\"}),\" and \",(0,n.jsx)(e.strong,{children:\"git\"}),\" installed.\"]}),`\n`,(0,n.jsx)(e.h2,{children:\"Installing Ansible\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Installing Ansible is quite easy, many Linux distributions have it inside their repositories, you can also use \",(0,n.jsx)(e.strong,{children:\"pip\"}),\", and type this tiny command:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`pip install ansible\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Creating an inventory\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To create an inventory you should create an \",(0,n.jsx)(e.em,{children:\"inventory\"}),\" file and then edit it with your preferred file editor.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"An example file will look something like that:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`[plugs]\n192.168.0.10\n\n[lights]\n192.168.0.11\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"As you can see we use square brackets to define host groups.\"}),`\n`,(0,n.jsx)(e.h3,{children:\"Using the inventory to store variables\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Another great feature of the inventory is the ability to \",(0,n.jsx)(e.strong,{children:\"store variables\"}),\" that can be used inside tasks.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`[plugs]\n192.168.0.10    friendly_name=\"Bathroom Fan\"\n\n[lights]\n192.168.0.11    friendly_name=\"Kitchen Downlight\"\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Setup the Tasmota integration\"}),`\n`,(0,n.jsx)(e.p,{children:\"Since Tasmota is not the typical use of Ansible we need to install a custom role to use the two systems together.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The role we're going to use today is Tobias Richter's \",(0,n.jsx)(e.a,{href:\"https://galaxy.ansible.com/tobias_richter/tasmota\",children:'\"Tasmota\"'}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"The command to install this role is:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`ansible-galaxy install tobias_richter.tasmota\n`})}),`\n`,(0,n.jsx)(e.h2,{children:\"Writing the playbook\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Now it's time to write the playbook!\",(0,n.jsx)(e.br,{}),`\n`,\"Create a new file named \",(0,n.jsx)(e.em,{children:\"playbook.yaml\"}),\" and then open it with your file editor.\",(0,n.jsx)(e.br,{}),`\n`,\"Now we have to create our first \",(0,n.jsx)(e.em,{children:\"play.\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We start by defining the group of hosts we want to target and then we have to disable the \",(0,n.jsx)(e.em,{children:\"gather_facts\"}),\" function, as for the \",(0,n.jsx)(e.a,{href:\"https://github.com/tobias-richter/ansible-tasmota#fact-gathering\",children:\"documentation\"}),\" of the custom role.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`- hosts: all\n  gather_facts: no\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"We can now create our first task and give it a name:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`tasks:\n  - name: Ensure device reports status\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Next, we have to define what module we're going to use. For this custom role, we have to use the \",(0,n.jsx)(e.em,{children:\"include_role\"}),\" module.\",(0,n.jsx)(e.br,{}),`\n`,\"Our task will become something like that:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`tasks:\n  - name: Ensure device reports status\n    include_role:\n      name: ansible-tasmota\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Now it's time to \",(0,n.jsx)(e.strong,{children:\"define\"}),\" the command we're going to send to our devices.\",(0,n.jsx)(e.br,{}),`\n`,\"Edit your task as follows:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`tasks:\n  - name: Ensure device is present\n    include_role:\n      name: ansible-tasmota\n    vars:\n      tasmota_commands:\n        - command: Status\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The resulting \",(0,n.jsx)(e.em,{children:\"playbook.yaml\"}),\" will look like this:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`- hosts: all\n  gather_facts: no\n  tasks:\n    - name: Ensure device is present\n      include_role:\n        name: ansible-tasmota\n      vars:\n        tasmota_commands:\n          - command: Status\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Now we can run our playbook like this:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-bash\",children:`ansible-playbook -i inventory playbook.yaml\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"You can use this as a base to create more complex playbooks.\"}),`\n`,(0,n.jsx)(e.h2,{children:\"Another example\"}),`\n`,(0,n.jsx)(e.p,{children:\"Let's say we want to configure the MQTT connection of our devices, we can use a playbook that looks something like this:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`- hosts: all\n  gather_facts: no\n  vars_files:\n    - default.yaml\n  tasks:\n    - name: Ensure template is set\n      include_role:\n        name: ansible-tasmota\n      vars:\n        - name: Ensure mqtt configuration is present\n          include_role:\n            name: ansible-tasmota\n          vars:\n            tasmota_commands:\n              - command: Backlog\n                value: \"mqttuser <mqttuser>; mqttpassword <mqttpass>; mqttport 1883; mqtthost <mqtthost>;\"\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"As you can see, using Ansible to \",(0,n.jsx)(e.strong,{children:\"configure\"}),\" a fleet of Tasmota devices is an \",(0,n.jsx)(e.strong,{children:\"easy\"}),\" task to setup and will help you manage your growing collection of smart devices in the long run.\"]})]})}function v(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(c,t)})):c(t)}var _=v;return w(A);})();\n;return Component;"
  },
  "_id": "blog/ansible_tasmota.md",
  "_raw": {
    "sourceFilePath": "blog/ansible_tasmota.md",
    "sourceFileName": "ansible_tasmota.md",
    "sourceFileDir": "blog",
    "contentType": "markdown",
    "flattenedPath": "blog/ansible_tasmota"
  },
  "type": "Post",
  "url": "blog/ansible_tasmota",
  "timeToRead": "4"
}