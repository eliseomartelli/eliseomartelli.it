{
  "title": "Netflix Payments reminder with the help of Home Assistant",
  "excerpt": "Aren't you tired of being the only one to pay for Netflix?",
  "date": "2020-03-02T00:00:00.000Z",
  "tags": [
    "Misc"
  ],
  "body": {
    "raw": "\nToday's project aims at tracking the _invoices_ of a shared account thanks to [Home Assistant](https://home-assistant.io).  \nFor those of you that don't know what Home Assistant is, well, Home Assistant is a versatile home automation software that can integrate a lot of different devices. It's starting to become an essential part of my living areas thanks to its possibilities.  \nAnd sometimes you _just_ wish that you could use it to automate people (just kiddin').\n\n## Prerequisites\n\nIf you're reading this, it's probably too late and you've already got your feet wet with Home Assistant. Otherwise, you need an installation of Home Assistant. You can install it following the official documentation [here](https://www.home-assistant.io/getting-started/).  \nYou also need a Telegram bot, you can create one using Telegram's [@botfather](https://telegram.me/BotFather).\n\n## Counting in Home Assistant\n\nHome Assistant has a built-in way of counting _things_: the [counter](https://www.home-assistant.io/integrations/counter/) integration.  \nThis integration offers a way of storing an integer number and changing its value.  \nWe're going to setup this integration in our configuration.yaml file (situated in the root of our Home Assistant configuration folder).\n\n```yaml\ncounter:\n  netflix_user_0:\n    initial: 0\n    step: 4\n    name: Mario\n  netflix_user_1:\n    initial: 0\n    step: 4\n    name: Luigi\n  netflix_user_2:\n    initial: 0\n    step: 4\n    name: Wario\n```\n\n## Scheduling counter's increments\n\nIn a _nutshell_, Home Assistant makes things happen through automations.\nAutomations are *pieces of code* that will run when something triggers it and/or some conditions are met.  \nIn a home automation system, they are the glue that can tie all of our devices together.  \nToday we’ll use them to create a recurring task dedicated to incrementing our newly added counters.\n\n```yaml\nautomation:\n  - alias: Increment Counter\n    trigger:\n      - platform: time\n        at: \"10:00:00\"\n    condition:\n      - condition: template\n        value_template: \"{{ now().day == 25 }}\"\n    action:\n      - service: counter.increment\n        entity_id:\n          - counter.netflix_user_0\n          - counter.netflix_user_1\n          - counter.netflix_user_2\n```\n\nAs for the above example, our automation will be composed by three distinct parts:\n\n1. A trigger;\n2. A condition;\n3. An action.\n\nThis automation will **check** every day at 10:00 am if the current day is the 25th of the month, if the **condition** is **true**, it will execute the **action** of incrementing the counters with the predefined step.\n\n## Notify the people in the sharing group\n\nAn important part of this project is **notifying** your friends if there's a change on their \"debts\".\nThis part is tied to the messaging service of your choice.  \nI consider myself lucky that our \"sharing group\" is on Telegram, widely supported by the official Home Assistant [integration](https://www.home-assistant.io/integrations/telegram/).\n\nSo, you might have guessed it, we're using **Telegram** today.\n\nTo configure this integration you have to put the following inside your configuration.yaml:\n\n```yaml\ntelegram_bot:\n  - platform: polling\n    api_key: YOUR_API_KEY\n    allowed_chat_ids:\n      - YOUR_CHAT_ID\n      - GROUP_CHAT_ID\n\nnotify:\n  - name: NOTIFIER_NAME\n    platform: telegram\n    chat_id: GROUP_CHAT_ID\n```\n\n_You can get chat ids using [@chatid_echo_bot](https://t.me/chatid_echo_bot)._\n\n## Sending messages to a Telegram group\n\nAfter the setup of the Telegram platform we need to find a way to send notifications to our group.  \nLet's assume we decide to send a message to our group every time we increment the counters.  \nTo do so we just need to **edit** our previous automation and add the following **action**:\n\n```yaml\n- service: notify.netflix_group\n  data_template:\n    message: >\n      ⚠️ Status:  \n\n      {{ states.counter.netflix_user_0.name }}: € {{ states.counter.netflix_user_0.state }}  \n\n      {{ states.counter.netflix_user_1.name }}: € {{ states.counter.netflix_user_1.state }}  \n\n      {{ states.counter.netflix_user_2.name }}: € {{ states.counter.netflix_user_2.state }}\n```\n\nWe're using **templates** so we can **dynamically** generate the message.\n\nReached this point, we can _call it a day_ and the basics of our system are now working. But at the moment we have no way to track _\"automatically\"_ if a user paid its _debt_.\n\n## User input from Telegram inline keyboard\n\nOne of the options given by Telegram to interact with bots is the **inline keyboard**.  \nInline keyboards are a set of buttons _attached_ to a message sent by a bot.  \nEach button _triggers_ a callback (to which Home Assistant can respond).\n\n### Adding an inline keyboard to a message\n\n![Screenshot of a Telegram chat showing the inline keyboard](https://i.ibb.co/xHLSbbQ/Screenshot-20200302-001437-01.jpg)\n\nAdding an inline keyboard to a message is a _trivial_ operation, we just need to define our keyboard in our message.  \nIt can be done by editing the previous action by adding:\n\n```yaml\ndata:\n  inline_keyboard:\n    - \"User0:/dec0\"\n    - \"User1:/dec1\"\n    - \"User2:/dec2\"\n```\n\nThe **resulting action** will look something like that:\n\n```yaml\n- service: notify.netflix_group\n  data_template:\n    message: >\n      ⚠️ Status:  \n\n      {{ states.counter.netflix_user_0.name }}: € {{ states.counter.netflix_user_0.state }}  \n\n      {{ states.counter.netflix_user_1.name }}: € {{ states.counter.netflix_user_1.state }}  \n\n      {{ states.counter.netflix_user_2.name }}: € {{ states.counter.netflix_user_2.state }}\n    data:\n      inline_keyboard:\n        - \"User0:/dec0\"\n        - \"User1:/dec1\"\n        - \"User2:/dec2\"\n```\n\n### Reacting to Telegram callbacks\n\n**We're almost there!** We have counters, buttons, automations and messages.  \nNow we should let our friends notify our system with the buttons mentioned above.  \nWe have to **react** to their callbacks: according to the [official documentation](https://www.home-assistant.io/integrations/telegram_bot#sample-automations-with-callback-queries-and-inline-keyboards), we need another automation to react to the callbacks.\n\nOur automation is gonna look like this one:\n\n```yaml\nalias: Other Netflix Decrement Counter\ntrigger:\n  - platform: event\n    event_type: telegram_callback\n    event_data:\n      chat_id: GROUP_CHAT_ID\ncondition:\n  - condition: template\n    value_template: >\n      {{ \"/dec\" in trigger.event.data.command }}\naction:\n  - service: counter.decrement\n    data_template:\n      entity_id: >\n        counter.netflix_user_{{ trigger.event.data.command | replace(\"/dec\", \"\") }}\n```\n\nThe **condition** is there to **check** if the command that we received contains the string: \"/dec\".  \nIn the action we see another **template**, this one is used to get the right counter based on the button that got pressed.\n\n### Updating the message\n\nA possible solution to notify of the decrement is to send another message, but I'm not using this solution because it appears quite _\"chatty\"_ to me and I don't want to annoy my friends.  \nSince Telegram supports **editing of messages**, I've opted to use this solution.\nWe just need to add another action to the previous automation.\n\n```yaml\n- service: telegram_bot.edit_message\n  data_template:\n    message_id: \"{{ trigger.event.data.message.message_id }}\"\n    chat_id: \"{{ trigger.event.data.chat_id }}\"\n    title: \"*Message edit*\"\n    message: >\n      ⚠️ Status:  \n\n      {{ states.counter.netflix_user_0.name }}: € {{ states.counter.netflix_user_0.state }}  \n\n      {{ states.counter.netflix_user_1.name }}: € {{ states.counter.netflix_user_1.state }}  \n\n      {{ states.counter.netflix_user_2.name }}: € {{ states.counter.netflix_user_2.state }}\n    inline_keyboard:\n      - \"User0:/dec0\"\n      - \"User1:/dec1\"\n      - \"User2:/dec2\"\n```\n\n## Final Steps\n\nWe're ready to deploy!  \nAdd your _new, and fresh baked_ Telegram bot to your sharing group.  \nYour friends will be grateful for this simple and effective reminder 😇.\n",
    "code": "var Component=(()=>{var h=Object.create;var r=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),_=(n,e)=>{for(var i in e)r(n,i,{get:e[i],enumerable:!0})},s=(n,e,i,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of m(e))!p.call(n,a)&&a!==i&&r(n,a,{get:()=>e[a],enumerable:!(o=u(e,a))||o.enumerable});return n};var y=(n,e,i)=>(i=n!=null?h(g(n)):{},s(e||!n||!n.__esModule?r(i,\"default\",{value:n,enumerable:!0}):i,n)),b=n=>s(r({},\"__esModule\",{value:!0}),n);var c=f((T,l)=>{l.exports=_jsx_runtime});var k={};_(k,{default:()=>v,frontmatter:()=>w});var t=y(c()),w={title:\"Netflix Payments reminder with the help of Home Assistant\",date:\"2020-03-02\",excerpt:\"Aren't you tired of being the only one to pay for Netflix?\",tags:[\"Misc\"]};function d(n){let e=Object.assign({p:\"p\",em:\"em\",a:\"a\",br:\"br\",h2:\"h2\",pre:\"pre\",code:\"code\",ol:\"ol\",li:\"li\",strong:\"strong\",h3:\"h3\",img:\"img\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"Today's project aims at tracking the \",(0,t.jsx)(e.em,{children:\"invoices\"}),\" of a shared account thanks to \",(0,t.jsx)(e.a,{href:\"https://home-assistant.io\",children:\"Home Assistant\"}),\".\",(0,t.jsx)(e.br,{}),`\n`,\"For those of you that don't know what Home Assistant is, well, Home Assistant is a versatile home automation software that can integrate a lot of different devices. It's starting to become an essential part of my living areas thanks to its possibilities.\",(0,t.jsx)(e.br,{}),`\n`,\"And sometimes you \",(0,t.jsx)(e.em,{children:\"just\"}),\" wish that you could use it to automate people (just kiddin').\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Prerequisites\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"If you're reading this, it's probably too late and you've already got your feet wet with Home Assistant. Otherwise, you need an installation of Home Assistant. You can install it following the official documentation \",(0,t.jsx)(e.a,{href:\"https://www.home-assistant.io/getting-started/\",children:\"here\"}),\".\",(0,t.jsx)(e.br,{}),`\n`,\"You also need a Telegram bot, you can create one using Telegram's \",(0,t.jsx)(e.a,{href:\"https://telegram.me/BotFather\",children:\"@botfather\"}),\".\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Counting in Home Assistant\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Home Assistant has a built-in way of counting \",(0,t.jsx)(e.em,{children:\"things\"}),\": the \",(0,t.jsx)(e.a,{href:\"https://www.home-assistant.io/integrations/counter/\",children:\"counter\"}),\" integration.\",(0,t.jsx)(e.br,{}),`\n`,\"This integration offers a way of storing an integer number and changing its value.\",(0,t.jsx)(e.br,{}),`\n`,\"We're going to setup this integration in our configuration.yaml file (situated in the root of our Home Assistant configuration folder).\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-yaml\",children:`counter:\n  netflix_user_0:\n    initial: 0\n    step: 4\n    name: Mario\n  netflix_user_1:\n    initial: 0\n    step: 4\n    name: Luigi\n  netflix_user_2:\n    initial: 0\n    step: 4\n    name: Wario\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Scheduling counter's increments\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"In a \",(0,t.jsx)(e.em,{children:\"nutshell\"}),`, Home Assistant makes things happen through automations.\nAutomations are\\xA0`,(0,t.jsx)(e.em,{children:\"pieces of code\"}),\"\\xA0that will run when something triggers it and/or some conditions are met.\",(0,t.jsx)(e.br,{}),`\n`,\"In a home automation system, they are the glue that can tie all of our devices together.\",(0,t.jsx)(e.br,{}),`\n`,\"Today we\\u2019ll use them to create a recurring task dedicated to incrementing our newly added counters.\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-yaml\",children:`automation:\n  - alias: Increment Counter\n    trigger:\n      - platform: time\n        at: \"10:00:00\"\n    condition:\n      - condition: template\n        value_template: \"{{ now().day == 25 }}\"\n    action:\n      - service: counter.increment\n        entity_id:\n          - counter.netflix_user_0\n          - counter.netflix_user_1\n          - counter.netflix_user_2\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"As for the above example, our automation will be composed by three distinct parts:\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsx)(e.li,{children:\"A trigger;\"}),`\n`,(0,t.jsx)(e.li,{children:\"A condition;\"}),`\n`,(0,t.jsx)(e.li,{children:\"An action.\"}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"This automation will \",(0,t.jsx)(e.strong,{children:\"check\"}),\" every day at 10:00 am if the current day is the 25th of the month, if the \",(0,t.jsx)(e.strong,{children:\"condition\"}),\" is \",(0,t.jsx)(e.strong,{children:\"true\"}),\", it will execute the \",(0,t.jsx)(e.strong,{children:\"action\"}),\" of incrementing the counters with the predefined step.\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"Notify the people in the sharing group\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"An important part of this project is \",(0,t.jsx)(e.strong,{children:\"notifying\"}),` your friends if there's a change on their \"debts\".\nThis part is tied to the messaging service of your choice.`,(0,t.jsx)(e.br,{}),`\n`,'I consider myself lucky that our \"sharing group\" is on Telegram, widely supported by the official Home Assistant ',(0,t.jsx)(e.a,{href:\"https://www.home-assistant.io/integrations/telegram/\",children:\"integration\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"So, you might have guessed it, we're using \",(0,t.jsx)(e.strong,{children:\"Telegram\"}),\" today.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"To configure this integration you have to put the following inside your configuration.yaml:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-yaml\",children:`telegram_bot:\n  - platform: polling\n    api_key: YOUR_API_KEY\n    allowed_chat_ids:\n      - YOUR_CHAT_ID\n      - GROUP_CHAT_ID\n\nnotify:\n  - name: NOTIFIER_NAME\n    platform: telegram\n    chat_id: GROUP_CHAT_ID\n`})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsxs)(e.em,{children:[\"You can get chat ids using \",(0,t.jsx)(e.a,{href:\"https://t.me/chatid_echo_bot\",children:\"@chatid_echo_bot\"}),\".\"]})}),`\n`,(0,t.jsx)(e.h2,{children:\"Sending messages to a Telegram group\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"After the setup of the Telegram platform we need to find a way to send notifications to our group.\",(0,t.jsx)(e.br,{}),`\n`,\"Let's assume we decide to send a message to our group every time we increment the counters.\",(0,t.jsx)(e.br,{}),`\n`,\"To do so we just need to \",(0,t.jsx)(e.strong,{children:\"edit\"}),\" our previous automation and add the following \",(0,t.jsx)(e.strong,{children:\"action\"}),\":\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-yaml\",children:`- service: notify.netflix_group\n  data_template:\n    message: >\n      \\u26A0\\uFE0F Status:  \n\n      {{ states.counter.netflix_user_0.name }}: \\u20AC {{ states.counter.netflix_user_0.state }}  \n\n      {{ states.counter.netflix_user_1.name }}: \\u20AC {{ states.counter.netflix_user_1.state }}  \n\n      {{ states.counter.netflix_user_2.name }}: \\u20AC {{ states.counter.netflix_user_2.state }}\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"We're using \",(0,t.jsx)(e.strong,{children:\"templates\"}),\" so we can \",(0,t.jsx)(e.strong,{children:\"dynamically\"}),\" generate the message.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Reached this point, we can \",(0,t.jsx)(e.em,{children:\"call it a day\"}),\" and the basics of our system are now working. But at the moment we have no way to track \",(0,t.jsx)(e.em,{children:'\"automatically\"'}),\" if a user paid its \",(0,t.jsx)(e.em,{children:\"debt\"}),\".\"]}),`\n`,(0,t.jsx)(e.h2,{children:\"User input from Telegram inline keyboard\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"One of the options given by Telegram to interact with bots is the \",(0,t.jsx)(e.strong,{children:\"inline keyboard\"}),\".\",(0,t.jsx)(e.br,{}),`\n`,\"Inline keyboards are a set of buttons \",(0,t.jsx)(e.em,{children:\"attached\"}),\" to a message sent by a bot.\",(0,t.jsx)(e.br,{}),`\n`,\"Each button \",(0,t.jsx)(e.em,{children:\"triggers\"}),\" a callback (to which Home Assistant can respond).\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"Adding an inline keyboard to a message\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"https://i.ibb.co/xHLSbbQ/Screenshot-20200302-001437-01.jpg\",alt:\"Screenshot of a Telegram chat showing the inline keyboard\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Adding an inline keyboard to a message is a \",(0,t.jsx)(e.em,{children:\"trivial\"}),\" operation, we just need to define our keyboard in our message.\",(0,t.jsx)(e.br,{}),`\n`,\"It can be done by editing the previous action by adding:\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-yaml\",children:`data:\n  inline_keyboard:\n    - \"User0:/dec0\"\n    - \"User1:/dec1\"\n    - \"User2:/dec2\"\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.strong,{children:\"resulting action\"}),\" will look something like that:\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-yaml\",children:`- service: notify.netflix_group\n  data_template:\n    message: >\n      \\u26A0\\uFE0F Status:  \n\n      {{ states.counter.netflix_user_0.name }}: \\u20AC {{ states.counter.netflix_user_0.state }}  \n\n      {{ states.counter.netflix_user_1.name }}: \\u20AC {{ states.counter.netflix_user_1.state }}  \n\n      {{ states.counter.netflix_user_2.name }}: \\u20AC {{ states.counter.netflix_user_2.state }}\n    data:\n      inline_keyboard:\n        - \"User0:/dec0\"\n        - \"User1:/dec1\"\n        - \"User2:/dec2\"\n`})}),`\n`,(0,t.jsx)(e.h3,{children:\"Reacting to Telegram callbacks\"}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"We're almost there!\"}),\" We have counters, buttons, automations and messages.\",(0,t.jsx)(e.br,{}),`\n`,\"Now we should let our friends notify our system with the buttons mentioned above.\",(0,t.jsx)(e.br,{}),`\n`,\"We have to \",(0,t.jsx)(e.strong,{children:\"react\"}),\" to their callbacks: according to the \",(0,t.jsx)(e.a,{href:\"https://www.home-assistant.io/integrations/telegram_bot#sample-automations-with-callback-queries-and-inline-keyboards\",children:\"official documentation\"}),\", we need another automation to react to the callbacks.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Our automation is gonna look like this one:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-yaml\",children:`alias: Other Netflix Decrement Counter\ntrigger:\n  - platform: event\n    event_type: telegram_callback\n    event_data:\n      chat_id: GROUP_CHAT_ID\ncondition:\n  - condition: template\n    value_template: >\n      {{ \"/dec\" in trigger.event.data.command }}\naction:\n  - service: counter.decrement\n    data_template:\n      entity_id: >\n        counter.netflix_user_{{ trigger.event.data.command | replace(\"/dec\", \"\") }}\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.strong,{children:\"condition\"}),\" is there to \",(0,t.jsx)(e.strong,{children:\"check\"}),' if the command that we received contains the string: \"/dec\".',(0,t.jsx)(e.br,{}),`\n`,\"In the action we see another \",(0,t.jsx)(e.strong,{children:\"template\"}),\", this one is used to get the right counter based on the button that got pressed.\"]}),`\n`,(0,t.jsx)(e.h3,{children:\"Updating the message\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"A possible solution to notify of the decrement is to send another message, but I'm not using this solution because it appears quite \",(0,t.jsx)(e.em,{children:'\"chatty\"'}),\" to me and I don't want to annoy my friends.\",(0,t.jsx)(e.br,{}),`\n`,\"Since Telegram supports \",(0,t.jsx)(e.strong,{children:\"editing of messages\"}),`, I've opted to use this solution.\nWe just need to add another action to the previous automation.`]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-yaml\",children:`- service: telegram_bot.edit_message\n  data_template:\n    message_id: \"{{ trigger.event.data.message.message_id }}\"\n    chat_id: \"{{ trigger.event.data.chat_id }}\"\n    title: \"*Message edit*\"\n    message: >\n      \\u26A0\\uFE0F Status:  \n\n      {{ states.counter.netflix_user_0.name }}: \\u20AC {{ states.counter.netflix_user_0.state }}  \n\n      {{ states.counter.netflix_user_1.name }}: \\u20AC {{ states.counter.netflix_user_1.state }}  \n\n      {{ states.counter.netflix_user_2.name }}: \\u20AC {{ states.counter.netflix_user_2.state }}\n    inline_keyboard:\n      - \"User0:/dec0\"\n      - \"User1:/dec1\"\n      - \"User2:/dec2\"\n`})}),`\n`,(0,t.jsx)(e.h2,{children:\"Final Steps\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"We're ready to deploy!\",(0,t.jsx)(e.br,{}),`\n`,\"Add your \",(0,t.jsx)(e.em,{children:\"new, and fresh baked\"}),\" Telegram bot to your sharing group.\",(0,t.jsx)(e.br,{}),`\n`,\"Your friends will be grateful for this simple and effective reminder \\u{1F607}.\"]})]})}function x(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(d,n)})):d(n)}var v=x;return b(k);})();\n;return Component;"
  },
  "_id": "blog/netflix-payments-home-assistant.md",
  "_raw": {
    "sourceFilePath": "blog/netflix-payments-home-assistant.md",
    "sourceFileName": "netflix-payments-home-assistant.md",
    "sourceFileDir": "blog",
    "contentType": "markdown",
    "flattenedPath": "blog/netflix-payments-home-assistant"
  },
  "type": "Post",
  "url": "blog/netflix-payments-home-assistant",
  "timeToRead": "7"
}