{
  "version": 3,
  "sources": ["../../../contentlayer.config.js", "../../../src/lib/timeToRead.ts"],
  "sourcesContent": ["import {\n  defineDocumentType,\n  defineNestedType,\n  makeSource,\n} from \"contentlayer/source-files\";\nimport { timeToRead } from \"./src/lib/timeToRead\";\n\nconst Photo = defineNestedType(() => ({\n  name: \"Photo\",\n  fields: {\n    title: {\n      type: \"string\",\n    },\n    url: {\n      type: \"string\",\n    },\n    aspect: {\n      type: \"enum\",\n      options: [\"vertical\", \"horizontal\"],\n    },\n  },\n}));\n\nexport const Photos = defineDocumentType(() => ({\n  name: \"Photos\",\n  filePathPattern: `photos/*.yaml`,\n  contentType: \"yaml\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the photo section.\",\n      required: true,\n    },\n    photos: { type: \"list\", of: Photo },\n  },\n}));\n\nexport const Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: `blog/*.md`,\n  contentType: \"mdx\",\n  fields: {\n    title: {\n      type: \"string\",\n      description: \"The title of the post\",\n      required: true,\n    },\n    excerpt: {\n      type: \"string\",\n      description: \"The excerpt of the post\",\n      required: true,\n    },\n    date: {\n      type: \"date\",\n      description: \"The date of the post\",\n      required: true,\n    },\n    tags: {\n      type: \"list\",\n      of: { type: \"string\" },\n      description: \"The tags of the post\",\n      required: true,\n    },\n  },\n  computedFields: {\n    url: {\n      type: \"string\",\n      resolve: (post) => post._raw.flattenedPath,\n    },\n    timeToRead: {\n      type: \"number\",\n      resolve: (post) => timeToRead(post.body.raw),\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: \".\",\n  documentTypes: [Post, Photos],\n});\n", "const WPM_READ = 200;\n\nexport const timeToRead = (content: string) => {\n  const { round, max } = Math;\n  return max(1, round(content.split(\" \").length / WPM_READ)).toString();\n};\n"],
  "mappings": ";AAAA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,OACK;;;ACJP,IAAM,WAAW;AAEV,IAAM,aAAa,CAAC,YAAoB;AAC7C,QAAM,EAAE,OAAO,IAAI,IAAI;AACvB,SAAO,IAAI,GAAG,MAAM,QAAQ,MAAM,GAAG,EAAE,SAAS,QAAQ,CAAC,EAAE,SAAS;AACtE;;;ADEA,IAAM,QAAQ,iBAAiB,OAAO;AAAA,EACpC,MAAM;AAAA,EACN,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,IACR;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,IACR;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,SAAS,CAAC,YAAY,YAAY;AAAA,IACpC;AAAA,EACF;AACF,EAAE;AAEK,IAAM,SAAS,mBAAmB,OAAO;AAAA,EAC9C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,QAAQ,EAAE,MAAM,QAAQ,IAAI,MAAM;AAAA,EACpC;AACF,EAAE;AAEK,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,SAAS;AAAA,MACP,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,MACrB,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,KAAK,KAAK;AAAA,IAC/B;AAAA,IACA,YAAY;AAAA,MACV,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,WAAW,KAAK,KAAK,GAAG;AAAA,IAC7C;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,MAAM,MAAM;AAC9B,CAAC;",
  "names": []
}
